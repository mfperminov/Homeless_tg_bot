name: Build and Deploy Homeless Bot

on:
  push:
    branches:
      - main # Or your default branch

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17' # Replace with your Java version if different
          distribution: 'temurin'
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Build with Gradle
        run: ./gradlew build # Replace with your actual build command if different
      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: homeless-bot-jar
          path: build/libs/*.jar # Adjust this path if your JAR is located elsewhere or has a specific name

  deploy:
    needs: build
    runs-on: ubuntu-latest
    env:
      APP_DIR: "/opt/homeless-bot"
      SERVICE_NAME: "homeless-bot"
      JAR_NAME: "app.jar" # The name for the JAR on the server

    steps:
      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: homeless-bot-jar
          path: /tmp/homelessbot
      - name: Prepare SSH and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          script: |
            set -e # Exit immediately if a command exits with a non-zero status.

            echo "Deploying application..."
            echo "Creating application directory ${{ env.APP_DIR }} if it doesn't exist..."
            sudo mkdir -p ${{ env.APP_DIR }}/src/main/resources

            echo "Finding downloaded JAR..."
            # Assuming only one JAR is in the artifact
            DOWNLOADED_JAR_PATH=$(find /tmp/homelessbot -name '*.jar' -print -quit)
            if [ -z "$DOWNLOADED_JAR_PATH" ]; then
              echo "Error: No JAR file found in the downloaded artifact."
              exit 1
            fi
            echo "Found JAR: $DOWNLOADED_JAR_PATH"

            echo "Copying JAR to ${{ env.APP_DIR }}/${{ env.JAR_NAME }}"
            sudo cp "$DOWNLOADED_JAR_PATH" "${{ env.APP_DIR }}/${{ env.JAR_NAME }}"

            echo "Creating app.env file..."
            # Ensure src directory exists for app.env as per Java code
            sudo mkdir -p ${{ env.APP_DIR }}/src
            echo "tg.bot.token=${{ secrets.TG_BOT_TOKEN }}" | sudo tee ${{ env.APP_DIR }}/src/app.env > /dev/null
            echo "spreadsheet.id=${{ secrets.SPREADSHEET_ID }}" | sudo tee -a ${{ env.APP_DIR }}/src/app.env > /dev/null

            echo "Creating credentials.json file..."
            echo '${{ secrets.GOOGLE_CREDENTIALS_JSON }}' | sudo tee ${{ env.APP_DIR }}/src/main/resources/credentials.json > /dev/null

            echo "Creating systemd service file /etc/systemd/system/${{ env.SERVICE_NAME }}.service"
            sudo tee /etc/systemd/system/${{ env.SERVICE_NAME }}.service > /dev/null <<EOF
            [Unit]
            Description=Homeless Bot Service
            After=network.target

            [Service]
            User=${{ secrets.VPS_USER }}
            Group=${{ secrets.VPS_USER }} # Assuming group is same as user, adjust if necessary
            WorkingDirectory=${{ env.APP_DIR }}
            ExecStart=/usr/bin/java -jar ${{ env.APP_DIR }}/${{ env.JAR_NAME }}
            SuccessExitStatus=143
            Restart=always
            RestartSec=5s
            StandardOutput=journal
            StandardError=journal
            SyslogIdentifier=${{ env.SERVICE_NAME }}

            [Install]
            WantedBy=multi-user.target
            EOF

            echo "Reloading systemd daemon..."
            sudo systemctl daemon-reload

            echo "Enabling and restarting ${{ env.SERVICE_NAME }} service..."
            sudo systemctl enable ${{ env.SERVICE_NAME }}.service
            sudo systemctl restart ${{ env.SERVICE_NAME }}.service

            echo "Deployment complete. To check logs, use: journalctl -u ${{ env.SERVICE_NAME }} -f" 